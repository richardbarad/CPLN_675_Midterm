calgary_fa <- rast('Data\calgary\calgary_flowaccumilation.tif')
calgary_fa <- rast('Data/calgary/calgary_flowaccumilation.tif')
calgary_fa <- project(calgary_fa,'EPSG:3780')
fa_extract <- terra::extract(calgary_fa,grid6, fun='max', na.rm=TRUE) %>%
rename(fa_max = calgary_flowaccumilation)
grid7 <- cbind(grid6,slope_extract %>% select(fa_max))
grid7 <- cbind(grid6,fa_extract %>% select(fa_max))
View(grid7)
grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,landcover_mode,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,as.numeric(landcover_mode),water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
t <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
View(t)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill='value'))+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill='value'))+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill=value))+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill=value),color='transparent')+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable,scales='free')
create_map <- function(variable,title){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option='rocket',label='elevation')+
ggtitle(title)
facet_wrap(~variable,scales='free')
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)')
m1
create_map <- function(variable,title){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option='rocket',label='elevation')+
ggtitle(title)
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)')
m1
ggplot()+
geom_sf(data=grid7,aes(fill=elevation),color='transparent')+
scale_fill_viridis(option='rocket',label='elevation')
ggplot()+
geom_sf(data=grid7,aes(fill=elevation),color='transparent')+
scale_fill_viridis(option='rocket',name='elevation')
create_map <- function(variable,title,color_scale){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name='elevation')+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket')
m1
create_map <- function(variable,title,color_scale){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name='elevation')+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako')
m2
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako','distance (meters)')
m2
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_max,'Flow Accumilation','mako','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
grid7$fa_log <- log(grid7$fa_max)
grid7$fa_log <- log(grid7$fa_max + 1)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_max,'Flow Accumilation','mako','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
m4 <- create_map(fa_log,'Flow Accumilation','mako','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
geom_sf(data=water,color='lightblue',alpha=0.4)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
geom_sf(data=water,color='lightblue',alpha=0.9)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
geom_sf(data=water,color='lightblue',alpha=0.1)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_max,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
m5 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4,m5)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4,m5)
View(grid7)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(knitr)
library(caret)
library(pscl)
library(plotROC)
library(pROC)
library(sf)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tigris)
library(viridis)
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
preserve <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/fishnet3k_pa_JoinDEM_Slope_distSlope_distUrban_landCover_distRivers.geojson")
protected <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/pa_protected_lands2.geojson")
preserve <- preserve %>%
st_transform(crs = 2272)
protected <- protected %>%
st_transform(crs = 2272)
counties <- counties('PA') %>%
st_as_sf() %>%
st_transform(crs = 2272)
ggplot() +
geom_sf(data = counties)+
geom_sf(data=protected,
fill = "dark green",
color = "dark green",
alpha = 0.6) +
labs(title="Protected lands in Pennsylvania") +
mapTheme
ggplot() +
geom_sf(data=preserve, aes(fill=as.factor(preserve)), color = "transparent") +
geom_sf(data = counties, fill = "transparent", color = "white")+
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Preserved","Preserved"),
name = "") +
labs(title="Protected lands in Pennsylvania (Fishnet)") +
mapTheme
preservePlotVariables <-
preserve %>%
as.data.frame() %>%
select(preserve,elevation,slope,dSteepSlop,dUrban,distRivers) %>%
gather(variable, value, -preserve)
ggplot(preservePlotVariables %>%
group_by(preserve, variable) %>%
summarize(mean = mean(value))) +
geom_bar(aes(as.factor(preserve),
mean,
fill=as.factor(preserve)),
stat="identity") +
facet_wrap(~variable) +
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Preserved","Preserved"),
name = "") +
labs(x="Preserved", y="Value")
preserve <-
preserve %>%
select(preserve,elevation,slope,dSteepSlop,landCover,dUrban,distRivers, Id) %>%
mutate(landCover = as.factor(landCover))
set.seed(3456)
trainIndex <- createDataPartition(preserve$landCover, p = .70,
list = FALSE,
times = 1)
preserveTrain <- preserve[ trainIndex,]
preserveTest  <- preserve[-trainIndex,]
preserveModel <- glm(preserve ~ .,
family="binomial"(link="logit"), data = preserveTrain %>%
as.data.frame() %>%
select(-geometry, -Id))
summary(preserveModel)
classProbs <- predict(preserveModel, preserveTest, type="response")
hist(classProbs)
testProbs <- data.frame(obs = as.numeric(preserveTest$preserve),
pred = classProbs)
ggplot(testProbs, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
ylab("Frequency")+
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Preserved","Preserved"),
name = "")+
plotTheme
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
auc(testProbs$obs, testProbs$pred)
ctrl <- trainControl(method = "cv",
number = 100,
p = 0.7,
savePredictions = TRUE)
cvFit <- train(as.factor(preserve) ~ .,  data = preserve %>%
as.data.frame() %>%
select(-geometry, -Id),
method="glm", family="binomial",
trControl = ctrl)
cvFit
ggplot(as.data.frame(cvFit$resample), aes(Accuracy)) +
geom_histogram() +
scale_x_continuous(limits = c(0, 1)) +
labs(x="Accuracy",
y="Count")+
plotTheme
allPredictions <-
predict(cvFit, preserve, type="prob")[,2]
preserve <-
cbind(preserve,allPredictions) %>%
mutate(allPredictions = round(allPredictions * 100))
ggplot() +
geom_sf(data=preserve, aes(fill=factor(ntile(allPredictions,5))),
colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(preserve$allPredictions,
c(0.1,.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
mapTheme +
labs(title="")
ggplot() +
geom_sf(data=preserve, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(preserve$allPredictions,
c(0.1,.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
geom_sf(data=preserve  %>%
filter(preserve == 1),
fill="dark green",colour=NA) +
geom_sf(data=preserve %>%
filter(landCover == 2),
fill="red",colour=NA) +
mapTheme +
labs(title="Observed and Predicted Conservation Areas",
subtitle="Pennsylvania; Existing conserved land in green; Existing development in red ")
preserve %>%
mutate(confResult=case_when(allPredictions < 50 & preserve==0 ~ "True_Negative",
allPredictions >= 50 & preserve==1 ~ "True_Positive",
allPredictions < 50 & preserve==1 ~ "False_Negative",
allPredictions >= 50 & preserve==0 ~ "False_Positive")) %>%
ggplot()+
geom_sf(aes(fill = confResult), color = "transparent")+
scale_fill_manual(values = c("Red","Orange","Light Blue","Light Green"),
name="Outcomes")+
labs(title="Confusion Metrics") +
mapTheme
a <- c(1,0,100,0)
b <- c(2,35,95,5)
c <- c(3,60,85,15)
d <- c(4,85,70,30)
e <- c(5,92,30,70)
f <- c(6,100,0,100)
radarObservations <- data.frame(rbind(a,b,c,d,e,f))
colnames(radarObservations) <- c("Radar_Setting",
"Sensitivity_Pct_Planes_Detected",
"Specificity_Pct_Geese_Detected",
"Pct_of_Geese_Incorrectly_Identified")
kable(radarObservations)
ggplot(radarObservations,
aes(100 - Specificity_Pct_Geese_Detected,
Sensitivity_Pct_Planes_Detected)) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
geom_point(size=2) +
geom_line() +
xlab("False positive rate") + ylab("True positive rate")
unicornFarms <-
preserve %>%
sample_n(50) %>%
st_centroid() %>%
mutate(legendItem="Unicorn Farms")
ggplot() +
geom_sf(data=st_sf(st_union(preserve))) +
geom_point(data=unicornFarms, aes(st_coordinates(unicornFarms)[,1],
st_coordinates(unicornFarms)[,2],
colour="Unicorn Farms")) +
mapTheme
preserveXY <-
preserve %>%
st_centroid %>%
st_coordinates  %>%
as.matrix()
unicornXY <-
unicornFarms %>%
st_coordinates %>%
as.matrix()
head(unicornXY)
library(FNN)
nn_function <- function(measureFrom,measureTo,k) {
nn <-
get.knnx(measureTo, measureFrom, k)$nn.dist
output <-
as.data.frame(nn) %>%
rownames_to_column(var = "thisPoint") %>%
gather(points, point_distance, V1:ncol(.)) %>%
arrange(as.numeric(thisPoint)) %>%
group_by(thisPoint) %>%
summarize(pointDistance = mean(point_distance)) %>%
arrange(as.numeric(thisPoint)) %>%
dplyr::select(-thisPoint)
return(output)
}
unicornDistance <- nn_function(preserveXY, unicornXY, 1)
output <- bind_cols(preserve, unicornDistance)
ggplot() +
geom_sf(data=st_sf(st_union(preserve))) +
geom_sf(data=output, aes(fill=pointDistance),colour=NA) +
geom_point(data=unicornFarms, aes(st_coordinates(unicornFarms)[,1],
st_coordinates(unicornFarms)[,2])) +
mapTheme
unicornDistance <- nn_function(preserveXY, unicornXY, 3)
output <- bind_cols(preserve, unicornDistance)
ggplot() +
geom_sf(data=st_sf(st_union(preserve))) +
geom_sf(data=output, aes(fill=pointDistance),colour=NA) +
geom_point(data=unicornFarms, aes(st_coordinates(unicornFarms)[,1],
st_coordinates(unicornFarms)[,2])) +
mapTheme
forest_districts <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/DCNR_BOF_Bndry_SFM201703.geojson") %>%
st_transform(2272)
ggplot()+
geom_sf(data = forest_districts)
# Turn preserve into centroid points and join
preserve_and_forests_centroid <-
st_join(preserve %>%
st_centroid(),
forest_districts)
# Turn this data into a data frame, throw away everything but the new data and the unique id (select) of the fishnet cells and then join it back go the original
preserve_and_forests_fishnet <-
left_join(preserve,
preserve_and_forests_centroid %>%
as.data.frame() %>%
select(DistrictNa, Id))
local_parks <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/DCNR_LocalParkAccess201511.geojson") %>%
st_transform(2272)
parks_and_fishnet <- st_join(local_parks, preserve_and_forests_fishnet)
preserve_and_forests_and_parks_fishnet <-
parks_and_fishnet %>%
as.data.frame() %>% # Need to make the sf a dataframe to throw away the geometry
group_by(Id) %>%
summarize(n_parks = n()) %>%
right_join(., preserve_and_forests_fishnet) %>%
st_as_sf()
preserve_and_forests_and_parks_fishnet <-
preserve_and_forests_and_parks_fishnet %>%
mutate(area = st_area(geometry),
parks_sqmi = n_parks/(as.numeric(area)*.00000003587))
ggplot()+
geom_sf(data = preserve_and_forests_and_parks_fishnet,
aes(fill = parks_sqmi), color = "transparent")+
scale_fill_viridis()+
labs(title="Density of park access points",
subtitle="Points/ sqmi ")+
mapTheme
preserve_and_forests_and_parks_fishnet %>%
mutate(slope_category_2 = ifelse(slope >= 6, "high slope", "low slope"),
slope_category_3 = case_when(slope < 3 ~ "low slope",
slope >= 3 & slope <6 ~ "medium slope",
slope >= 6 ~ "high slope"))
