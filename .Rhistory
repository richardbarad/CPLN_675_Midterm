ggplot()+
geom_sf(data=grid,fill='transparent')+
geom_sf(data=calgary_boundary,fill='transparent',color='red')
grid <- st_make_grid(calgary_boundary,200,square=TRUE) %>%
st_as_sf()
View(grid)
grid <- st_make_grid(calgary_boundary,200,square=TRUE)
grid <- st_make_grid(calgary_boundary,200,square=TRUE) %>%
st_sf()
grid <- st_make_grid(calgary_boundary,200,square=TRUE) %>%
st_sf() %>%
consecutive_id()
grid <- st_make_grid(calgary_boundary,200,square=TRUE) %>%
st_sf() %>%
mutate(ID = row_number())
View(grid)
library(mapview)
mapview(grid)
knitr::opts_chunk$set(echo = TRUE)
water <- st_read('Data/calgary/Hydrology_20240320.geojson') %>% st_transform('EPSG:3780')
library(sf)
library(tidyverse)
library(terra)
library(kableExtra)
library(tigris)
library(viridis)
library(gridExtra)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(tidyverse)
library(terra)
library(kableExtra)
library(tigris)
library(viridis)
library(gridExtra)
calgary_boundary <- st_read('Data/calgary/CALGIS_CITYBOUND_LIMIT/CALGIS_CITYBOUND_LIMIT.shp') %>% st_transform('EPSG:3780')
inundation <- rast('Data/calgary/inundation/w001001.adf')
inundation <- project(inundation,'EPSG:3780') #Project innundation raster into correct cordinate system
grid <- st_make_grid(calgary_boundary,100,square=TRUE) %>%
st_sf() %>%
mutate(ID = row_number())
# Get just grid squares with centroid in Calgary city limits
grid <- grid %>%
st_centroid() %>%
st_join(.,calgary_boundary,join = st_intersects,left=FALSE) %>%
st_drop_geometry() %>%
left_join(.,grid,by='ID') %>%
st_as_sf() %>%
mutate(ID = row_number()) %>%
select(ID)
# Count the number of innundation cells in each grid square in fishnet
extract_values <- extract(inundation, grid) %>% #Assign each raster pixel to a grid square
group_by(ID,w001001) %>% tally() %>%
ungroup() %>%
pivot_wider(id_cols=ID,names_from=w001001,values_from=n) %>%
replace(is.na(.), 0) %>% #Replace NA with 0
filter(`NA` == 0) %>% #Filter out grid squares that do not have innundation data
# 1 and 2 are innundation, sum thoose together and sum 0 and 3 together for non_inundation
mutate(innundation = `1` + `2`,
non_innundate = `0` + `3` + `NA`,
in_id = as.factor(ifelse(innundation/(innundation + non_innundate) > 0.25,1,0))) %>% #If grid square is more than 25% innundate consider it innunduate (i.e: 1)
select(ID,in_id)
grid2 <- right_join(grid,extract_values,by='ID')
# Make Map of innudated areas
ggplot()+
geom_sf(data=grid2,aes(fill=in_id),color='transparent')+
theme_void()
dem <- rast('Data/calgary/calgarydem/w001001.adf')
dem <- project(dem,'EPSG:3780')
elevation_extract <- terra::extract(dem,grid2,fun='mean',na.rm=TRUE) %>%
rename(elevation_mean = w001001) %>%
mutate(elevation = elevation_mean - min(elevation_mean))
grid3 <- cbind(grid2,elevation_extract %>% select(elevation))
permiable <- st_read('Data/calgary/local_land_Cover/landcover.shp') %>%
filter(ldscmetric != 'Impermable') %>%
st_transform('EPSG:3780')
grid_perm_int <- st_intersection(grid3,permiable)
grid_perm_int <- grid_perm_int %>%
mutate(area = round(as.numeric(st_area(grid_perm_int)),2)) %>%
st_drop_geometry() %>%
group_by(ID) %>% summarise(perm_area = sum(area))
grid4 <- left_join(grid3,grid_perm_int,by='ID') %>%
mutate(perm_area = replace_na(perm_area,0),
pct_perm = round(perm_area/as.numeric(st_area(.))*100,2)) %>%
select(-perm_area)
rm(grid_perm_int)
land_cover1 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N48W114_Map.tif')
land_cover2 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N48W117_Map.tif')
land_cover3 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N51W114_Map.tif')
land_cover4 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N51W117_Map.tif')
calgary_land_cover <- terra::merge(land_cover1,land_cover2,land_cover3,land_cover4) #Merge together all tiles that overlap Calgary
calgary_land_cover2 <- crop(calgary_land_cover, calgary_boundary %>% st_transform('EPSG:4326')) #Crop Raster to Calgary
grid5 <- grid4 %>% st_transform('EPSG:4326') #Project grid so that I do not have to project the raster
mode <- function(class){
which.max(tabulate(class))
}
# Extract raster values within each polygon
land_cover_values <- extract(calgary_land_cover2, grid5) %>%
rename(landcover = ESA_WorldCover_10m_2020_v100_N48W114_Map) %>%
group_by(ID) %>% summarise(landcover_mode = mode(landcover)) %>%
ungroup() %>%
select(landcover_mode)
grid6 <- cbind(grid5,land_cover_values) %>%
st_transform('EPSG:3780') %>%
mutate(landcover_mode = as.factor(landcover_mode))
water <- st_read('Data/calgary/Hydrology_20240320.geojson') %>% st_transform('EPSG:3780')
centroid <- grid6 %>%
st_centroid()
nearest_feat <- st_nearest_feature(centroid,water)
grid6$water_dist <- as.double(st_distance(centroid, water[nearest_feat,], by_element=TRUE))
View(grid6)
ggplot()+
geom_sf(data=grid6,aes(fill=water_dist))
ggplot()+
geom_sf(data=grid6,aes(fill=water_dist),color='transparent')
ggplot()+
geom_sf(data=water,fill='lightblue',color='transparent')+
geom_sf(data=grid6,aes(fill=water_dist),color='transparent')+
scale_fill_viridis()
ggplot()+
geom_sf(data=grid6,aes(fill=water_dist),color='transparent')+
geom_sf(data=water,fill='lightblue',color='transparent')+
scale_fill_viridis(option='rocket')
save.image("C:/Users/richa/GitHub/CPLN_675_Midterm/.RData")
rm(calgary_land_cover3)
rm(calgary_land_cover4)
rm(land_cover_extract)
View(grid6)
View(grid5)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(tidyverse)
library(terra)
library(kableExtra)
library(tigris)
library(viridis)
library(gridExtra)
calgary_boundary <- st_read('Data/calgary/CALGIS_CITYBOUND_LIMIT/CALGIS_CITYBOUND_LIMIT.shp') %>% st_transform('EPSG:3780')
inundation <- rast('Data/calgary/inundation/w001001.adf')
inundation <- project(inundation,'EPSG:3780') #Project innundation raster into correct cordinate system
grid <- st_make_grid(calgary_boundary,100,square=TRUE) %>%
st_sf() %>%
mutate(ID = row_number())
# Get just grid squares with centroid in Calgary city limits
grid <- grid %>%
st_centroid() %>%
st_join(.,calgary_boundary,join = st_intersects,left=FALSE) %>%
st_drop_geometry() %>%
left_join(.,grid,by='ID') %>%
st_as_sf() %>%
mutate(ID = row_number()) %>%
select(ID)
# Count the number of innundation cells in each grid square in fishnet
extract_values <- extract(inundation, grid) %>% #Assign each raster pixel to a grid square
group_by(ID,w001001) %>% tally() %>%
ungroup() %>%
pivot_wider(id_cols=ID,names_from=w001001,values_from=n) %>%
replace(is.na(.), 0) %>% #Replace NA with 0
filter(`NA` == 0) %>% #Filter out grid squares that do not have innundation data
# 1 and 2 are innundation, sum thoose together and sum 0 and 3 together for non_inundation
mutate(innundation = `1` + `2`,
non_innundate = `0` + `3` + `NA`,
in_id = as.factor(ifelse(innundation/(innundation + non_innundate) > 0.25,1,0))) %>% #If grid square is more than 25% innundate consider it innunduate (i.e: 1)
select(ID,in_id)
grid2 <- right_join(grid,extract_values,by='ID')
# Make Map of innudated areas
ggplot()+
geom_sf(data=grid2,aes(fill=in_id),color='transparent')+
theme_void()
dem <- rast('Data/calgary/calgarydem/w001001.adf')
dem <- project(dem,'EPSG:3780')
elevation_extract <- terra::extract(dem,grid2,fun='mean',na.rm=TRUE) %>%
rename(elevation_mean = w001001) %>%
mutate(elevation = elevation_mean - min(elevation_mean))
grid3 <- cbind(grid2,elevation_extract %>% select(elevation))
permiable <- st_read('Data/calgary/local_land_Cover/landcover.shp') %>%
filter(ldscmetric != 'Impermable') %>%
st_transform('EPSG:3780')
#Need four land cover tiles to cover all of Calgary
land_cover1 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N48W114_Map.tif')
land_cover2 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N48W117_Map.tif')
land_cover3 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N51W114_Map.tif')
land_cover4 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N51W117_Map.tif')
calgary_land_cover <- terra::merge(land_cover1,land_cover2,land_cover3,land_cover4) #Merge together all land cover rasters that overlap Calgary
calgary_land_cover2 <- crop(calgary_land_cover, calgary_boundary %>% st_transform('EPSG:4326')) #Crop Raster to Calgary
grid4 <- grid3 %>% st_transform('EPSG:4326') #Project grid into WGS1984 so that I do not have to project the raster
mode <- function(class){
which.max(tabulate(class))
}
# Extract raster values within each polygon and determine the most common raster value
land_cover_values <- extract(calgary_land_cover2, grid4) %>%
rename(landcover = ESA_WorldCover_10m_2020_v100_N48W114_Map) %>%
group_by(ID) %>% summarise(landcover_mode = mode(landcover)) %>%
ungroup() %>%
select(landcover_mode)
grid5 <- cbind(grid4,land_cover_values) %>%
st_transform('EPSG:3780') %>%
mutate(landcover_mode = as.factor(landcover_mode))
water <- st_read('Data/calgary/Hydrology_20240320.geojson') %>% st_transform('EPSG:3780')
centroid <- grid5 %>%
st_centroid()
nearest_feat <- st_nearest_feature(centroid,water)
grid6$water_dist <- as.double(st_distance(centroid, water[nearest_feat,], by_element=TRUE))
grid5$water_dist <- as.double(st_distance(centroid, water[nearest_feat,], by_element=TRUE))
cal_dem <- raster('Data/calgary/calgarydem/w001001.adf') %>%
projectRaster(cal_dem, crs = 'EPSG:3780')
calgary_slope <- terrain(cal_dem, v="slope", neighbors=8, unit="degrees")
calgary_slope <- terrain(dem, v="slope", neighbors=8, unit="degrees")
plot(calgary_slope)
slope_extract <- terra::extract(calgary_slope,grid_den, fun='max', na.rm=TRUE) %>%
rename(slope_max = slope)
calgary_slope <- terrain(dem, v="slope", neighbors=8, unit="degrees")
plot(calgary_slope)
slope_extract <- terra::extract(slope,grid5, fun='max', na.rm=TRUE) %>%
rename(slope_max = slope)
calgary_slope <- terrain(dem, v="slope", neighbors=8, unit="degrees")
slope_extract <- terra::extract(calgary_slope,grid5, fun='max', na.rm=TRUE) %>%
rename(slope_max = slope)
grid6 <- cbind(grid5,slope_extract %>% select(slope_max))
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(tidyverse)
library(terra)
library(kableExtra)
library(tigris)
library(viridis)
library(gridExtra)
calgary_boundary <- st_read('Data/calgary/CALGIS_CITYBOUND_LIMIT/CALGIS_CITYBOUND_LIMIT.shp') %>% st_transform('EPSG:3780')
inundation <- rast('Data/calgary/inundation/w001001.adf')
inundation <- project(inundation,'EPSG:3780') #Project innundation raster into correct cordinate system
grid <- st_make_grid(calgary_boundary,100,square=TRUE) %>%
st_sf() %>%
mutate(ID = row_number())
# Get just grid squares with centroid in Calgary city limits
grid <- grid %>%
st_centroid() %>%
st_join(.,calgary_boundary,join = st_intersects,left=FALSE) %>%
st_drop_geometry() %>%
left_join(.,grid,by='ID') %>%
st_as_sf() %>%
mutate(ID = row_number()) %>%
select(ID)
# Count the number of innundation cells in each grid square in fishnet
extract_values <- extract(inundation, grid) %>% #Assign each raster pixel to a grid square
group_by(ID,w001001) %>% tally() %>%
ungroup() %>%
pivot_wider(id_cols=ID,names_from=w001001,values_from=n) %>%
replace(is.na(.), 0) %>% #Replace NA with 0
filter(`NA` == 0) %>% #Filter out grid squares that do not have innundation data
# 1 and 2 are innundation, sum thoose together and sum 0 and 3 together for non_inundation
mutate(innundation = `1` + `2`,
non_innundate = `0` + `3` + `NA`,
in_id = as.factor(ifelse(innundation/(innundation + non_innundate) > 0.25,1,0))) %>% #If grid square is more than 25% innundate consider it innunduate (i.e: 1)
select(ID,in_id)
grid2 <- right_join(grid,extract_values,by='ID')
# Make Map of innudated areas
ggplot()+
geom_sf(data=grid2,aes(fill=in_id),color='transparent')+
theme_void()
dem <- rast('Data/calgary/calgarydem/w001001.adf')
dem <- project(dem,'EPSG:3780')
elevation_extract <- terra::extract(dem,grid2,fun='mean',na.rm=TRUE) %>%
rename(elevation_mean = w001001) %>%
mutate(elevation = elevation_mean - min(elevation_mean))
grid3 <- cbind(grid2,elevation_extract %>% select(elevation))
#Need four land cover tiles to cover all of Calgary
land_cover1 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N48W114_Map.tif')
land_cover2 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N48W117_Map.tif')
land_cover3 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N51W114_Map.tif')
land_cover4 <- rast('Data/calgary/worldcover/ESA_WorldCover_10m_2020_v100_N51W117_Map.tif')
calgary_land_cover <- terra::merge(land_cover1,land_cover2,land_cover3,land_cover4) #Merge together all land cover rasters that overlap Calgary
calgary_land_cover2 <- crop(calgary_land_cover, calgary_boundary %>% st_transform('EPSG:4326')) #Crop Raster to Calgary
grid4 <- grid3 %>% st_transform('EPSG:4326') #Project grid into WGS1984 so that I do not have to project the raster
mode <- function(class){
which.max(tabulate(class))
}
# Extract raster values within each polygon and determine the most common raster value
land_cover_values <- extract(calgary_land_cover2, grid4) %>%
rename(landcover = ESA_WorldCover_10m_2020_v100_N48W114_Map) %>%
group_by(ID) %>% summarise(landcover_mode = mode(landcover)) %>%
ungroup() %>%
select(landcover_mode)
grid5 <- cbind(grid4,land_cover_values) %>%
st_transform('EPSG:3780') %>%
mutate(landcover_mode = as.factor(landcover_mode))
water <- st_read('Data/calgary/Hydrology_20240320.geojson') %>% st_transform('EPSG:3780')
centroid <- grid5 %>%
st_centroid()
nearest_feat <- st_nearest_feature(centroid,water)
grid5$water_dist <- as.double(st_distance(centroid, water[nearest_feat,], by_element=TRUE))
calgary_slope <- terrain(dem, v="slope", neighbors=8, unit="degrees")
slope_extract <- terra::extract(calgary_slope,grid5, fun='max', na.rm=TRUE) %>%
rename(slope_max = slope)
grid6 <- cbind(grid5,slope_extract %>% select(slope_max))
calgary_fa <- rast('Data\calgary\calgary_flowaccumilation.tif')
calgary_fa <- rast('Data/calgary/calgary_flowaccumilation.tif')
calgary_fa <- project(calgary_fa,'EPSG:3780')
fa_extract <- terra::extract(calgary_fa,grid6, fun='max', na.rm=TRUE) %>%
rename(fa_max = calgary_flowaccumilation)
grid7 <- cbind(grid6,slope_extract %>% select(fa_max))
grid7 <- cbind(grid6,fa_extract %>% select(fa_max))
View(grid7)
grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,landcover_mode,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,as.numeric(landcover_mode),water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
t <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
View(t)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill='value'))+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill='value'))+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill=value))+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable)
long_data <- grid7 %>%
select(-in_id) %>%
pivot_longer(cols= c(elevation,water_dist,slope_max,fa_max),names_to = 'variable',values_to = 'value')
ggplot()+
geom_sf(data=long_data,aes(fill=value),color='transparent')+
scale_fill_viridis(option='rocket')+
facet_wrap(~variable,scales='free')
create_map <- function(variable,title){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option='rocket',label='elevation')+
ggtitle(title)
facet_wrap(~variable,scales='free')
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)')
m1
create_map <- function(variable,title){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option='rocket',label='elevation')+
ggtitle(title)
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)')
m1
ggplot()+
geom_sf(data=grid7,aes(fill=elevation),color='transparent')+
scale_fill_viridis(option='rocket',label='elevation')
ggplot()+
geom_sf(data=grid7,aes(fill=elevation),color='transparent')+
scale_fill_viridis(option='rocket',name='elevation')
create_map <- function(variable,title,color_scale){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name='elevation')+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket')
m1
create_map <- function(variable,title,color_scale){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name='elevation')+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako')
m2
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako','distance (meters)')
m2
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_max,'Flow Accumilation','mako','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
grid7$fa_log <- log(grid7$fa_max)
grid7$fa_log <- log(grid7$fa_max + 1)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','mako','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_max,'Flow Accumilation','mako','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
m4 <- create_map(fa_log,'Flow Accumilation','mako','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
geom_sf(data=water,color='lightblue',alpha=0.4)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
geom_sf(data=water,color='lightblue',alpha=0.9)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
geom_sf(data=water,color='lightblue',alpha=0.1)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_max,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
m5 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4,m5)
create_map <- function(variable,title,color_scale,legend_label){
ggplot()+
geom_sf(data=grid7,aes(fill={{variable}}),color='transparent')+
scale_fill_viridis(option=color_scale,name=legend_label)+
ggtitle(title)+
theme_void()
}
m1 <- create_map(elevation,'Elevation Above Minimum City Elevation (meters)','rocket','elevation (meters')
m2 <- create_map(water_dist,'Distance to Water (meters)','plasma','distance (meters)')
m3 <- create_map(slope_max,'Slope','magma','Slope')
m4 <- create_map(fa_log,'Flow Accumilation (Natural Log)','cividis','Number of Pixels')
grid.arrange(m1,m2,m3,m4,m5)
View(grid7)
